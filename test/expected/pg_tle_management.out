/*
*
* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
*/
\pset pager off
CREATE EXTENSION pg_tle;
-- create semi-privileged role to manipulate pg_tle artifacts
CREATE ROLE dbadmin;
GRANT pgtle_admin TO dbadmin;
-- create unprivileged role to create trusted extensions
CREATE ROLE dbstaff;
-- create alt unprivileged role to create trusted extensions
CREATE ROLE dbstaff2;
-- create completely unprivileged role
CREATE ROLE dbguest;
GRANT CREATE, USAGE ON SCHEMA PUBLIC TO pgtle_admin;
GRANT CREATE, USAGE ON SCHEMA PUBLIC TO dbstaff;
DO
$$
  DECLARE
    objname text;
    sql text;
  BEGIN
    SELECT current_database() INTO objname;
    EXECUTE format('GRANT CREATE ON DATABASE %I TO dbstaff;', objname);
  END;
$$ LANGUAGE plpgsql;
-- create function that can be executed by superuser only
CREATE OR REPLACE FUNCTION superuser_only()
RETURNS INT AS $$
(
  SELECT 51
) $$ LANGUAGE sql;
REVOKE EXECUTE ON FUNCTION superuser_only() FROM PUBLIC;
SET search_path TO pgtle,public;
-- installation of artifacts requires semi-privileged role
SET SESSION AUTHORIZATION dbadmin;
SELECT CURRENT_USER;
 current_user 
--------------
 dbadmin
(1 row)

SELECT pgtle.install_extension
(
 'test123',
 '1.0',
 'Test TLE Functions',
$_pgtle_$
  CREATE OR REPLACE FUNCTION test123_func()
  RETURNS INT AS $$
  (
    SELECT 42
  )$$ LANGUAGE sql;
$_pgtle_$
);
 install_extension 
-------------------
 t
(1 row)

SELECT pgtle.install_extension
(
 'test_superuser_only_when_untrusted',
 '1.0',
 'Test TLE Functions',
$_pgtle_$
  CREATE OR REPLACE FUNCTION test_superuser_only_when_untrusted_func()
  RETURNS INT AS $$
  (
    SELECT 101
  )$$ LANGUAGE sql;
$_pgtle_$
);
 install_extension 
-------------------
 t
(1 row)

-- install a trusted extension that calls functions requiring superuser privilege
SELECT pgtle.install_extension
(
 'test_no_switch_to_superuser_when_trusted',
 '1.0',
 'Test TLE Functions',
$_pgtle_$
  SELECT superuser_only();
$_pgtle_$
);
 install_extension 
-------------------
 t
(1 row)

SET search_path TO public;
-- superuser can create extensions that are not trusted and do not require superuser privilege
RESET SESSION AUTHORIZATION;
CREATE EXTENSION test_superuser_only_when_untrusted;
SELECT test_superuser_only_when_untrusted_func();
 test_superuser_only_when_untrusted_func 
-----------------------------------------
                                     101
(1 row)

DROP EXTENSION test_superuser_only_when_untrusted;
SET SESSION AUTHORIZATION dbstaff;
SELECT CURRENT_USER;
 current_user 
--------------
 dbstaff
(1 row)

-- unprivileged role can create and use trusted extensions that do not require superuser privilege
CREATE EXTENSION test123;
SELECT test123_func();
 test123_func 
--------------
           42
(1 row)

-- unprivileged role can not create a trusted extension that requires superuser privilege
-- fails
CREATE EXTENSION test_no_switch_to_superuser_when_trusted;
ERROR:  permission denied for function superuser_only
-- switch to dbstaff2
SET SESSION AUTHORIZATION dbstaff2;
SELECT CURRENT_USER;
 current_user 
--------------
 dbstaff2
(1 row)

-- fails
DROP EXTENSION test123;
ERROR:  must be owner of extension test123
-- suceeds
SELECT test123_func();
 test123_func 
--------------
           42
(1 row)

-- fails
DROP FUNCTION test123_func();
ERROR:  must be owner of function test123_func
-- switch to dbguest
SET SESSION AUTHORIZATION dbguest;
SELECT CURRENT_USER;
 current_user 
--------------
 dbguest
(1 row)

-- fails
DROP EXTENSION test123;
ERROR:  must be owner of extension test123
-- suceeds
SELECT test123_func();
 test123_func 
--------------
           42
(1 row)

-- fails
DROP FUNCTION test123_func();
ERROR:  must be owner of function test123_func
SET search_path TO pgtle, public;
-- installation of artifacts requires semi-privileged role
SET SESSION AUTHORIZATION dbadmin;
SELECT CURRENT_USER;
 current_user 
--------------
 dbadmin
(1 row)

SELECT pgtle.install_extension
(
 'test123',
 '1.1',
 'Test TLE Functions',
$_pgtle_$
  CREATE OR REPLACE FUNCTION test123_func()
  RETURNS INT AS $$
  (
    SELECT 42
  )$$ LANGUAGE sql;
  CREATE OR REPLACE FUNCTION test123_func_2()
  RETURNS INT AS $$
  (
    SELECT 424242
  )$$ LANGUAGE sql;
$_pgtle_$
);
ERROR:  Extension 'test123' already installed.
SELECT pgtle.install_update_path
(
 'test123',
 '1.0',
 '1.1',
$_pgtle_$
  CREATE OR REPLACE FUNCTION test123_func_2()
  RETURNS INT AS $$
  (
    SELECT 424242
  )$$ LANGUAGE sql;
$_pgtle_$
);
 install_update_path 
---------------------
 t
(1 row)

SET search_path TO public;
-- unprivileged role can modify and use trusted extension
SET SESSION AUTHORIZATION dbstaff;
SELECT CURRENT_USER;
 current_user 
--------------
 dbstaff
(1 row)

ALTER EXTENSION test123 UPDATE TO '1.1';
SELECT test123_func_2();
 test123_func_2 
----------------
         424242
(1 row)

SELECT * FROM pgtle.extension_update_paths('test123');
 source | target |   path   
--------+--------+----------
 1.0    | 1.1    | 1.0--1.1
 1.1    | 1.0    | 
(2 rows)

SELECT * FROM pgtle.available_extensions() ORDER BY name;
                   name                   | default_version |      comment       
------------------------------------------+-----------------+--------------------
 test123                                  | 1.0             | Test TLE Functions
 test_no_switch_to_superuser_when_trusted | 1.0             | Test TLE Functions
 test_superuser_only_when_untrusted       | 1.0             | Test TLE Functions
(3 rows)

SELECT * FROM pgtle.available_extension_versions() ORDER BY name;
                   name                   | version | superuser | trusted | relocatable | schema | requires |      comment       
------------------------------------------+---------+-----------+---------+-------------+--------+----------+--------------------
 test123                                  | 1.0     | f         | f       | f           |        | {pg_tle} | Test TLE Functions
 test123                                  | 1.1     | f         | f       | f           |        | {pg_tle} | Test TLE Functions
 test_no_switch_to_superuser_when_trusted | 1.0     | f         | f       | f           |        | {pg_tle} | Test TLE Functions
 test_superuser_only_when_untrusted       | 1.0     | f         | f       | f           |        | {pg_tle} | Test TLE Functions
(4 rows)

DROP EXTENSION test123;
-- negative tests, run as superuser
RESET SESSION AUTHORIZATION;
-- should fail
-- attempt to create a function in pgtle directly
CREATE OR REPLACE FUNCTION pgtle.foo()
RETURNS TEXT AS $$
SELECT 'ok'
$$ LANGUAGE sql;
ERROR:  pgtle schema reserved for pg_tle functions
-- create a function in public and then attempt alter to pg_tle
-- this works
CREATE OR REPLACE FUNCTION public.pg_tlefoo()
RETURNS TEXT AS $$
SELECT 'ok'
$$ LANGUAGE sql;
-- but this should fail
ALTER FUNCTION public.pg_tlefoo() SET SCHEMA pgtle;
ERROR:  pgtle schema reserved for pg_tle functions
-- clean up, should work
DROP FUNCTION public.pg_tlefoo();
-- attempt to shadow existing file-based extension
-- fail
SELECT pgtle.install_extension
(
 'plpgsql',
 '1.0',
 'Test TLE Functions',
$_pgtle_$
  CREATE OR REPLACE FUNCTION test123_func()
  RETURNS INT AS $$
  (
    SELECT 42
  )$$ LANGUAGE sql;
$_pgtle_$
);
ERROR:  control file already exists for the plpgsql extension
-- attempt to alter a pg_tle extension function
-- fail
ALTER FUNCTION pgtle.install_extension
(
  name text,
  version text,
  description text,
  ext text,
  requires text[],
  encoding text
)
SET search_path TO 'public';
ERROR:  altering pg_tle functions in pgtle schema not allowed
-- test uninstall extensions by a specific version
SELECT pgtle.install_extension
(
 'new_ext',
 '1.0',
 'Test TLE Functions',
$_pgtle_$
  CREATE FUNCTION fun()
  RETURNS INT AS $$ SELECT 1; $$ LANGUAGE SQL;
$_pgtle_$
);
 install_extension 
-------------------
 t
(1 row)

SELECT pgtle.install_update_path
(
 'new_ext',
 '1.0',
 '1.1',
$_pgtle_$
  CREATE OR REPLACE FUNCTION fun()
  RETURNS INT AS $$ SELECT 2; $$ LANGUAGE SQL;
$_pgtle_$
);
 install_update_path 
---------------------
 t
(1 row)

SELECT *
FROM pgtle.available_extension_versions() x WHERE x.name = 'new_ext';
  name   | version | superuser | trusted | relocatable | schema | requires |      comment       
---------+---------+-----------+---------+-------------+--------+----------+--------------------
 new_ext | 1.0     | f         | f       | f           |        | {pg_tle} | Test TLE Functions
 new_ext | 1.1     | f         | f       | f           |        | {pg_tle} | Test TLE Functions
(2 rows)

SELECT pgtle.uninstall_extension('new_ext', '1.1');
 uninstall_extension 
---------------------
 t
(1 row)

SELECT *
FROM pgtle.available_extension_versions() x WHERE x.name = 'new_ext';
  name   | version | superuser | trusted | relocatable | schema | requires |      comment       
---------+---------+-----------+---------+-------------+--------+----------+--------------------
 new_ext | 1.0     | f         | f       | f           |        | {pg_tle} | Test TLE Functions
(1 row)

SELECT pgtle.uninstall_extension('new_ext');
 uninstall_extension 
---------------------
 t
(1 row)

-- back to our regular program: these should work
-- removal of artifacts requires semi-privileged role
SET SESSION AUTHORIZATION dbadmin;
SELECT CURRENT_USER;
 current_user 
--------------
 dbadmin
(1 row)

SELECT pgtle.uninstall_extension('test123');
 uninstall_extension 
---------------------
 t
(1 row)

SELECT pgtle.uninstall_extension('test_superuser_only_when_untrusted');
 uninstall_extension 
---------------------
 t
(1 row)

SELECT pgtle.uninstall_extension('test_no_switch_to_superuser_when_trusted');
 uninstall_extension 
---------------------
 t
(1 row)

-- clean up
RESET SESSION AUTHORIZATION;
DROP FUNCTION superuser_only();
REVOKE CREATE, USAGE ON SCHEMA PUBLIC FROM dbstaff;
REVOKE CREATE, USAGE ON SCHEMA PUBLIC FROM pgtle_admin;
DROP ROLE dbadmin;
DO
$$
  DECLARE
    objname text;
    sql text;
  BEGIN
    SELECT current_database() INTO objname;
    EXECUTE format('REVOKE ALL ON DATABASE %I FROM dbstaff;', objname);
  END;
$$ LANGUAGE plpgsql;
DROP ROLE dbstaff;
DROP ROLE dbstaff2;
DROP ROLE dbguest;
DROP EXTENSION pg_tle;
DROP SCHEMA pgtle;
DROP ROLE pgtle_admin;
