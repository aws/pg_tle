--  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
--
--  Licensed under the Apache License, Version 2.0 (the "License").
--  You may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-- Expect password to go through since we haven't enabled the feature
CREATE ROLE testuser with password 'pass';
-- Test 'on' / 'off' / 'require'
ALTER SYSTEM SET pgtle.enable_password_check = 'off';
SELECT pg_reload_conf();
 pg_reload_conf 
----------------
 t
(1 row)

ALTER ROLE testuser with password 'pass';
ALTER SYSTEM SET pgtle.enable_password_check = 'on';
SELECT pg_reload_conf();
 pg_reload_conf 
----------------
 t
(1 row)

-- Do not expect an error
ALTER ROLE testuser with password 'pass';
CREATE EXTENSION pg_tle;
-- Do not expect an error
ALTER ROLE testuser with password 'pass';
ALTER SYSTEM SET pgtle.enable_password_check = 'require';
SELECT pg_reload_conf();
 pg_reload_conf 
----------------
 t
(1 row)

-- Expect an error for require if no entries are present
ALTER ROLE testuser with password 'pass';
-- Insert a value into the feature table
CREATE OR REPLACE FUNCTION password_check_length_greater_than_8(username text, shadow_pass text, password_types pgtle.password_types, validuntil_time TimestampTz,validuntil_null boolean) RETURNS void AS
$$
BEGIN
if length(shadow_pass) < 8 then
  RAISE EXCEPTION 'Passwords needs to be longer than 8';
end if;
END;
$$
LANGUAGE PLPGSQL;
SELECT pgtle.register_feature('password_check_length_greater_than_8', 'passcheck');
 register_feature 
------------------
 
(1 row)

-- Expect failure since pass is shorter than 8
ALTER ROLE testuser with password 'pass';
ERROR:  Passwords needs to be longer than 8
CONTEXT:  PL/pgSQL function password_check_length_greater_than_8(text,text,pgtle.password_types,timestamp with time zone,boolean) line 4 at RAISE
SQL statement "SELECT public.password_check_length_greater_than_8($1::pg_catalog.text, $2::pg_catalog.text, $3::pgtle.password_types, $4::pg_catalog.timestamptz, $5::pg_catalog.bool)"
ALTER ROLE testuser with password 'passwords';
-- Test that by default a role has access to the feature_info table
CREATE ROLE testuser_2 with LOGIN;
SET SESSION AUTHORIZATION testuser_2;
ALTER ROLE testuser_2 with password 'pass';
ERROR:  Passwords needs to be longer than 8
CONTEXT:  PL/pgSQL function password_check_length_greater_than_8(text,text,pgtle.password_types,timestamp with time zone,boolean) line 4 at RAISE
SQL statement "SELECT public.password_check_length_greater_than_8($1::pg_catalog.text, $2::pg_catalog.text, $3::pgtle.password_types, $4::pg_catalog.timestamptz, $5::pg_catalog.bool)"
-- Test that by default unprivileged users do not have permission to insert into table
-- or have access to functions
CREATE OR REPLACE FUNCTION unpriv_function_passcheck(username text, shadow_pass text, password_types pgtle.password_types, validuntil_time TimestampTz,validuntil_null boolean) RETURNS void AS
$$
BEGIN
if length(shadow_pass) < 8 then
  RAISE EXCEPTION 'Passwords needs to be longer than 8';
end if;
END;
$$
LANGUAGE PLPGSQL;
SELECT pgtle.register_feature('unpriv_function_passcheck', 'passcheck');
ERROR:  permission denied for table feature_info
CONTEXT:  SQL statement "INSERT INTO pgtle.feature_info VALUES (feature, proc_schema_name, proname, ident)"
PL/pgSQL function pgtle.register_feature(regproc,pgtle.pg_tle_features) line 24 at SQL statement
SELECT pgtle.unregister_feature('password_check_length_greater_than_8', 'passcheck');
ERROR:  permission denied for table feature_info
CONTEXT:  SQL statement "DELETE FROM pgtle.feature_info
	WHERE
		feature_info.feature = $2 AND
		feature_info.schema_name = proc_schema_name AND
		feature_info.proname = proc_name"
PL/pgSQL function pgtle.unregister_feature(regproc,pgtle.pg_tle_features) line 35 at SQL statement
INSERT INTO pgtle.feature_info VALUES ('passcheck', '', 'unpriv_function_passcheck', '');
ERROR:  permission denied for table feature_info
DELETE FROM pgtle.feature_info where feature = 'passcheck';
ERROR:  permission denied for table feature_info
RESET SESSION AUTHORIZATION;
CREATE OR REPLACE FUNCTION password_check_only_nums(username text, shadow_pass text, password_types pgtle.password_types, validuntil_time TimestampTz,validuntil_null boolean) RETURNS void AS
$$
DECLARE x NUMERIC;
BEGIN
x = shadow_pass::NUMERIC;

EXCEPTION WHEN others THEN
RAISE EXCEPTION 'Passwords can only have numbers';
END;
$$
LANGUAGE PLPGSQL;
SELECT pgtle.register_feature('password_check_only_nums', 'passcheck');
 register_feature 
------------------
 
(1 row)

-- Test both functions are called
ALTER ROLE testuser with password 'passwords';
ERROR:  Passwords can only have numbers
CONTEXT:  PL/pgSQL function password_check_only_nums(text,text,pgtle.password_types,timestamp with time zone,boolean) line 7 at RAISE
SQL statement "SELECT public.password_check_only_nums($1::pg_catalog.text, $2::pg_catalog.text, $3::pgtle.password_types, $4::pg_catalog.timestamptz, $5::pg_catalog.bool)"
ALTER ROLE testuser with password '123456789';
INSERT INTO pgtle.feature_info VALUES ('passcheck', '', 'password_check_only_nums', '');
-- Expect to fail cause no schema qualified function found
ALTER ROLE testuser with password '123456789';
ERROR:  Check entries in pgtle.feature_info table, schema and proname must be present
-- test insert of duplicate hook and fail
SELECT pgtle.register_feature('password_check_length_greater_than_8', 'passcheck');
ERROR:  duplicate key value violates unique constraint "feature_info_pkey"
DETAIL:  Key (feature, schema_name, proname)=(passcheck, public, password_check_length_greater_than_8) already exists.
CONTEXT:  SQL statement "INSERT INTO pgtle.feature_info VALUES (feature, proc_schema_name, proname, ident)"
PL/pgSQL function pgtle.register_feature(regproc,pgtle.pg_tle_features) line 24 at SQL statement
-- unregister hooks
SELECT pgtle.unregister_feature('password_check_only_nums', 'passcheck');
 unregister_feature 
--------------------
 
(1 row)

SELECT pgtle.unregister_feature('password_check_length_greater_than_8', 'passcheck');
 unregister_feature 
--------------------
 
(1 row)

-- fail on unregistering a hook that does not exist
SELECT pgtle.unregister_feature('password_check_length_greater_than_8', 'passcheck');
ERROR:  Could not unregister "password_check_length_greater_than_8": does not exist.
CONTEXT:  PL/pgSQL function pgtle.unregister_feature(regproc,pgtle.pg_tle_features) line 44 at RAISE
-- try the register if not exists
SELECT pgtle.register_feature_if_not_exists('password_check_length_greater_than_8', 'passcheck');
 register_feature_if_not_exists 
--------------------------------
 t
(1 row)

SELECT pgtle.register_feature_if_not_exists('password_check_length_greater_than_8', 'passcheck');
 register_feature_if_not_exists 
--------------------------------
 f
(1 row)

-- try the unregister if exists
SELECT pgtle.unregister_feature_if_exists('password_check_length_greater_than_8', 'passcheck');
 unregister_feature_if_exists 
------------------------------
 t
(1 row)

SELECT pgtle.unregister_feature_if_exists('password_check_length_greater_than_8', 'passcheck');
 unregister_feature_if_exists 
------------------------------
 f
(1 row)

TRUNCATE TABLE pgtle.feature_info;
INSERT INTO pgtle.feature_info VALUES ('passcheck', 'public', 'test_foo;select foo()', '');
ALTER ROLE testuser with password '123456789';
ERROR:  passcheck feature does not support calling out to functions/schemas that contain ';'
HINT:  Check the pgtle.feature_info table does not contain ';' in it's entry.
DROP ROLE testuser;
DROP FUNCTION unpriv_function_passcheck;
DROP ROLE testuser_2;
ALTER SYSTEM RESET pgtle.enable_password_check;
SELECT pg_reload_conf();
 pg_reload_conf 
----------------
 t
(1 row)

DROP FUNCTION password_check_length_greater_than_8;
DROP FUNCTION password_check_only_nums;
DROP EXTENSION pg_tle;
